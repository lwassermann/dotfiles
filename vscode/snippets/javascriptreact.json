{
  // Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "describe": {
    "prefix": "describe",
    "body": [
      "describe('${1:something}', () => {",
      "  it('${3:does something}', () => {",
      "    ${4: /* expect('a').toEqual('b') */}",
      "  })",
      "})"
    ]
  },
  "test case": {
    "prefix": "it",
    "body": "it('${1:does something}', () => {${2}})"
  },
  "lambda": {
    "prefix": "f",
    "body": "function $2($1) {$0}"
  },
  "test suite testing library": {
    "prefix": "subject-testing",
    "body": [
      "import { render } from '@testing-library/react';",
      "import userEvent from '@testing-library/user-event';",
      "import React from 'react';",
      "",
      "import { ${1:systemUnderTest} } from '../${1:systemUnderTest}';",
      "",
      "describe('<${1:systemUnderTest}>', () => {",
      "  function subject(overrideProps) {",
      "    const defaultProps = {${2}};",
      "    const props = { ...defaultProps, ...overrideProps };",
      "    return Object.assign(",
      "      render(<${1:systemUnderTest} {...props} />),",
      "      { user: userEvent.setup() }",
      "    );",
      "  }",
      "",
      "  it('${3:does something}', () => {",
      "    const screen = subject({});",
      "",
      "    expect(screen).toBe(true);",
      "  });",
      "});",
      ""
    ]
  }
}
